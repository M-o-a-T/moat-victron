#!/usr/bin/env python3

import sys
import os
import anyio
import asyncclick as click
import ast
import ruyaml

from victron.dbus import Dbus
from victron.dbus.monitor import DbusMonitor
from victron.inv import InvControl
from victron.dbus.utils import DbusInterface  # XXX move
from asyncdbus.message_bus import MessageBus, BusType

import logging
logger = logging.getLogger(__name__)

_modes="""
Modes:

"""
for _i,_c in InvControl.MODES.items():
	_modes += "\b\n"
	_modes += f"{_c._name :<15s} {_c.__doc__}\n\n\b\n"
	_modes += "   "+_c._doc["_l"].replace("\n","\n   ").replace("\n   \n","\n\n\b\n").rstrip(" ") + "\n\b\n"
	if len(_c._doc) > 1:
		_modes += "   Operational Variables:\n"
	for k,v in _c._doc.items():
		if k[0] == "_":
			continue
		_modes += f"   {k :<15s} {v}\n"

	_modes += "\n"

@click.command(epilog=_modes)
@click.option("--debug", "-d", is_flag=True)
@click.option("--no-op", "-n", is_flag=True)
@click.option("--mode", "-m", help="Inverter mode")
@click.option("--param", "-p", "param", nargs=2, type=(str,str), multiple=True, help="Parameter (evaluated)")
@click.option("--config","--cfg", "-c", "config", type=click.File("r"), help="Configuration file (YAML)")
async def main(debug, mode, no_op, param, config):
	"""
	This program controls a Victron Energy inverter.
	"""
	# Init logging
	logging.basicConfig(level=logging.DEBUG if debug else logging.INFO)
	logger.debug(__file__ + " is starting up")

	import os
	import sys
	sys.path.insert(0, "/data/moat")
	sys.path.insert(1, "/data/moat/bus/python")

	if config:
		yaml = ruyaml.YAML()
		cfg = yaml.load(config)
		config.close()
	else:
		cfg = {}
	if mode is not None:
		cfg["mode"] = mode
	op = cfg.setdefault("op",{})
	op.setdefault("debug",1)
	op["debug"] += debug
	op["fake"] = no_op

	for k,v in param:
		v=float(v)
		op[k] = v

	async with MessageBus(bus_type=BusType.SYSTEM).connect() as bus, \
	           InvControl(bus, cfg) as inv:
		await inv.run()

if __name__ == "__main__":
	main(_anyio_backend="trio")
